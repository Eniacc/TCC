package states;

import editorView.PathBoxer;
import editorView.StageView;
import editorView.WaveBoxer;
import editorView.WaypointView;
import flixel.FlxG;
import flixel.FlxState;
import flixel.group.FlxGroup.FlxTypedGroup;
import flixel.math.FlxRect;
import model.Bot;
import model.Path;
import model.Player;
import model.Wave;
import model.Waypoint;

/**
 * ...
 * @author Oelson TCS
 */
class EditorState extends FlxState
{
	var stage:StageView;
	var waveBoxer:WaveBoxer;
	var pathBoxer:PathBoxer;
	var waypointView:WaypointView;
	
	var waves:FlxTypedGroup<Wave>;
	var currentWave:Int = 0;
	var currentPath:Int = 0;

	override public function create():Void
	{
		stage = new StageView(660);
		stage.callbackSelected = displayWaypointData;
		add(stage);
		
		waveBoxer = new WaveBoxer(selectWave);
		add(waveBoxer);
		
		pathBoxer = new PathBoxer(selectPath);
		pathBoxer.x = waveBoxer.width;
		add(pathBoxer);
		
		waypointView = new WaypointView(332,300);
		add(waypointView);
		
		testCreate();
	}
	
	function displayWaypointData(waypoint:Waypoint) 
	{
		waypointView.loadWaypoint(waypoint);
	}
	
	function selectWave(index:Int) 
	{
		trace('SELECT WAVE', index);
		currentWave = index;
		waveBoxer.setSelected(currentWave);
		pathBoxer.loadPaths(waves.members[index]);
		selectPath(0);
	}
	
	function selectPath(index:Int) 
	{
		trace('SELECT PATH', index);
		currentPath = index;
		pathBoxer.setSelected(currentPath);
		stage.loadPath(waves.members[currentWave].members[index]);
	}
	
	function testCreate() 
	{
		waves = new FlxTypedGroup<Wave>();
		for (i in 0...FlxG.random.int(1,5)) 
		{
			var wave:Wave = new Wave();
			for (i in 0...FlxG.random.int(1,5)) 
			{
				var path:Path = new Path();
				for (i in 0...FlxG.random.int(1,5))
				{
					var waypoint:Waypoint = new Waypoint();
					waypoint.xPer = FlxG.random.float(0, 1);
					waypoint.yPer = FlxG.random.float(0, 1);
					waypoint.fire = FlxG.random.bool();
					waypoint.rotation = FlxG.random.int(0, 360);
					waypoint.speed = FlxG.random.float(0.3,3);
					waypoint.wait = FlxG.random.int(0, 2);
					waypoint.rateOfFire = FlxG.random.int(0, 5);
					path.add(waypoint);
					trace("Waypoints:" + path.length);
				}
				//path.spawnBots();
				wave.add(path);
				trace("Paths:" + wave.length);
			}
			waves.add(wave);
			trace("Waves:" + waves.length);
		}
		
		waveBoxer.loadWaves(waves);
		currentWave = 0;
		selectWave(currentWave);
	}
	
	override public function update(elapsed:Float):Void 
	{
		super.update(elapsed);
		if (FlxG.keys.justPressed.SPACE) spawnTest();
	}
	
	function spawnTest() 
	{
		var bot:Bot = new Bot();
		bot.waypoints = waves.members[currentWave].members[currentPath];
		bot.reference = new FlxRect(stage.gameStage.x, stage.gameStage.y, stage.gameStage.width, stage.gameStage.height);
		//trace(bot.reference);
		bot.awake();
		stage.add(bot);
	}
}